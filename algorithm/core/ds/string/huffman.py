# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/51_string_huffman_encoding.ipynb (unless otherwise specified).

__all__ = ['Node', 'huffman_encode', 'huffman']

# Cell
from dataclasses import dataclass, field
import heapq
from typing import Any


@dataclass(order=True)
class Node:
    weight: int
    c: Any=field(compare=False, default='$')
    left: Any=field(compare=False, default=None)
    right: Any=field(compare=False, default=None)


def huffman_encode(root, prefix=""):
    if root.left is not None:
        yield from huffman_encode(root.left, prefix+"0")
        if root.right is not None:
            yield from huffman_encode(root.right, prefix+"1")
    else:
        if root.right is not None:
            yield from huffman_encode(root.right, prefix+"1")
        else:
            yield (root.c, prefix)


def huffman(s):
    if not s:
        return

    q = []
    for c, i in s:
        heapq.heappush(q, Node(i, c))

    while len(q) > 1:
        l = heapq.heappop(q)
        r = heapq.heappop(q)
        n = Node(l.weight + r.weight, '$', l, r)
        heapq.heappush(q, n)

    root = q[0]
    yield from huffman_encode(root)
