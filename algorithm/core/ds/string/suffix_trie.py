# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/50_string_suffix_trie.ipynb (unless otherwise specified).

__all__ = ['SuffixTrie']

# Cell


class SuffixTrie():

    def __init__(self, t, terminal='$'):
        """ Make suffix trie from t """
        self.root = {}
        self.terminal = terminal
        t += terminal # special character like '$'
        sz = len(t)
        for i in range(sz):
            cur = self.root
            for j in range(i, sz):
                c = t[j]
                if c not in cur:
                    cur[c] = {} # add outgoing edge
                cur = cur[c]


    def follow_path(self, s):
        """ Follow path given by characters of s.  Return node at
            end of path, or None if we fall off. """
        cur = self.root
        for c in s:
            if c not in cur:
                return None
            cur = cur[c]
        return cur

    def has_substring(self, s):
        """ Return true iff s appears as a substring of t """
        return self.follow_path(s) is not None

    def has_suffix(self, s):
        """ Return true iff s is a suffix of t """
        node = self.follow_path(s)
        return node is not None and self.terminal in node

