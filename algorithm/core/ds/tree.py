# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/20_tree_lowest_common_ancestor.ipynb (unless otherwise specified).

__all__ = ['Node', 'create_tree', 'bst_successor', 'bst_precessor', 'bst_insert']

# Cell

class Node:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

    def left_most(self):
        p = self
        while p.left is not None:
            p = p.left
        return p

    def right_most(self):
        p = self
        while p.right is not None:
            p = p.right
        return p

    def __str__(self):
        return f"{self.val}"


    def print_tree(self, level=0):
        if self.left:
            self.left.print_tree(level+1)
        prefix = '*'*level
        print(f"{prefix}{self.val}")
        if self.right:
            self.right.print_tree(level+1)


def _create_tree(a, i, sz):
    if i >= sz:
        return None, 0

    if a[i] is None:
        return None, 1

    n = Node(a[i])
    n.left, l_sz = _create_tree(a, i+1, sz)
    n.right, r_sz = _create_tree(a, i+1+l_sz, sz)
    return n, 1+l_sz+r_sz


def create_tree(a):
    if a is None:
        return None

    r, _ = _create_tree(a, 0, len(a))
    return r


def bst_successor(key, root: Node) -> Node:
    if root is None:
        return None

    if key < root.val:
        #left
        s = bst_successor(key, root.left)
        if s is None:
            return root
        return s
    elif key == root.val:
        if root.right is None:
            return None
        return root.right.left_most()
    else:
        return bst_successor(key, root.right)


def bst_precessor(key, root: Node) -> Node:
    if root is None:
        return None

    if key < root.val:
        # left
        return bst_precessor(key, root.left)
    elif key == root.val:
        if root.left is None:
            return None
        return root.left.right_most()
    else:
        s = bst_successor(key, root.right)
        return s if s is not None else root


def bst_insert(root: Node, v) -> Node:
    if root is None:
        return Node(v)

    if v < root.val:
        temp = bst_insert(root.left, v)
        if root.left is None:
            root.left = temp
    elif v > root.val:
        temp = bst_insert(root.right, v)
        if root.right is None:
            root.right = temp
    else:
        pass
    return root