# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01_heap.ipynb (unless otherwise specified).

__all__ = ['left', 'right', 'parent', 'naive_heapify', 'naive_heap_down', 'heapify']

# Cell

def left(i):
    return (i << 1) + 1


def right(i):
    return (i << 1) + 2


def parent(i):
    return (i-1)>>1


def naive_heapify(a, i, sz):
    if i >= sz:
        return

    l = left(i)
    naive_heapify(a, l, sz)
    r = right(i)
    naive_heapify(a, r, sz)

    #which branch
    b = l
    if (r < sz) and (a[r] < a[b]):
        b = r

    if (b < sz) and (a[i] > a[b]):
        a[i], a[b] = a[b], a[i]
    naive_heap_down(a, b, sz)


def naive_heap_down(a, i, sz):
    if i >= sz:
        return

    l = left(i)
    r = right(i)

    #which branch
    b = l
    if (r < sz) and (a[r] < a[b]):
        b = r

    if (b < sz) and (a[i] > a[b]):
        a[i], a[b] = a[b], a[i]
    naive_heap_down(a, b, sz)


# Cell

def _heapify(a, i, sz):
    if i >= sz:
        return

    l = left(i)
    smallest = i
    if l < sz and a[l] < a[i]:
        smallest = l

    r = right(i)
    if r < sz and a[r] < a[smallest]:
        smallest = r
    if smallest != i:
        a[i], a[smallest] = a[smallest], a[i]
        _heapify(a, smallest, sz)


def heapify(a):
    sz = len(a)
    n = (len(a)//2)-1
    for i in range(n, -1, -1):
        _heapify(a, i, sz)